// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Sql;

namespace WebApp.Sql.Migrations
{
    [DbContext(typeof(WebAppContext))]
    [Migration("20230108095529_add Gender & Religion")]
    partial class addGenderReligion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("WebApp.Sql.Entities.Blogs.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Blogs.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("BlogId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.AwardType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AwardTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AwardTypes");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.BloodGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("BloodGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.ClaimType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CliamTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ClaimTypes");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Countrys");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DesignationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Designation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.DocumentCategorie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DocumentCategorieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DocumentCategorie");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DocumentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.EducationGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EducationGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EducationGroup");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.EducationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EducationTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EducationType");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.EmploymentCategorie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EmploymentCategories");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GradePoint")
                        .HasColumnType("real");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.HobbyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("HobbyTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("HobbyTypes");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Institute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Institutes");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.JobBaseStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("JobBaseStatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobBaseStatusTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("JobBaseStatuses");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.LeaveType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("FullPayment")
                        .HasColumnType("real");

                    b.Property<float>("HalfPayment")
                        .HasColumnType("real");

                    b.Property<bool>("IsMeternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartialLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnpaid")
                        .HasColumnType("bit");

                    b.Property<string>("LeaveTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.MaritalStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaritalStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.NewApprovalWorkflow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewApprovalWorkflowName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("NewApprovalWorkflows");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.OpeningYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ClosingYear")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpeningYearNumber")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("OpeningYears");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Proficiency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProficiencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Proficiencies");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Relation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RelationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Religion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReligionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.SupervisorSetup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SupervisorSetups");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.WarningType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WarningTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("WarningTypes");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.WorkflowMaping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ApplicatonTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("WorkflowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowMaps");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AssetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AssetStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssetTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ModelNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WarrantyPeriod")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.AssetRequisition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ApprovalById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("AssetRequisition");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.AssetType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("AssetType");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.AwardInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AwardTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Gift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceAmount")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AwardTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("AwardInfos");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.BankInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("BankInfos");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.BranchInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("BranchAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("BranchInfos");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.CompanyInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyInfos");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeMobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PermanentCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermanentCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermanentStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("PermanentZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalMobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PresentCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PresentCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PresentStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("PresentZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PermanentCityId");

                    b.HasIndex("PermanentCountryId");

                    b.HasIndex("PermanentStateId");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.DepartmentSetup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("EffectedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("DepartmentSetups");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.DesignationSetup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DesignationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("DesignationSetups");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.DistributeAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartdDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("DistributeAssets");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Education", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EducationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EgucationGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ForeignDegree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstituteId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastEducation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PassingYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessionalDegree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("EgucationGroupId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("InstituteId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.EmployeeManagementCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeManagementCategories");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Employees", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AcountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BasicSalary")
                        .HasColumnType("int");

                    b.Property<string>("Brance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesignationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResignDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.FamilyInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FamilyMemberName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NationalityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationshipId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("FamilyInfos");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.FunctionalDesignation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("FunctionalDesignations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.JobNewStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NextJobStatusType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatusType")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobNewStatus");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.JobStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.ToTable("JobStatuses");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProficencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProficencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.NewJobStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("NewJobStatus");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Passport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Supervisor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDirectSupervisor")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SuppervisorEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SuppervisorSetupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SuppervisorSetupId");

                    b.HasIndex("UserId");

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserAddressInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("Address")
                        .HasColumnType("bigint");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserInformationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ZipCode")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserInformationId");

                    b.ToTable("UserAddressInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserBasicInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserInformationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserInformationId");

                    b.ToTable("UserBasicInformations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserCertification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Institute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassingYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserInformationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserInformationId");

                    b.ToTable("UserCertifications");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserEducationalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutOfScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassingYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserInformationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserInformationId");

                    b.ToTable("UserEducationalInformations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserHobbyInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserInformationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserInformationId");

                    b.ToTable("UserHobbyInformations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DrivingLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherLasttname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MaritalStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NationalityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReligionId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReligionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInformations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserProfessionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("JoiningDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserInformationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserInformationId");

                    b.ToTable("UserProfessionalInformations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserInformationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserInformationId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Warning", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarningByEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WarningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarningDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarningType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Warnings");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.RoleMenuMapper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("RoleMenuMappers");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Logs.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Logs.EmailLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Logs.RequestLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Logs.SmsLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SmsLogs");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Settings.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Blogs.Category", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Blogs.Blog", null)
                        .WithMany("Categories")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.AwardType", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("AwardTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.City", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.State", "State")
                        .WithMany("Citites")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.ClaimType", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("ClaimTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Department", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.Designation", "Designation")
                        .WithMany("Departments")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.DocumentCategorie", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("DocumentCategories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.DocumentType", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", null)
                        .WithMany("DocumentTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.EducationGroup", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("EducationGroups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.EducationType", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("EducationTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.EmploymentCategorie", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("EmploymentCategories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Grade", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("Grades")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Institute", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("Institutes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.JobBaseStatus", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.BranchInfo", "Branch")
                        .WithMany("JobBaseStatuses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("JobBaseStatuses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Project", "Project")
                        .WithMany("JobBaseStatuses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.LeaveType", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("LeaveTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.NewApprovalWorkflow", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("NewApprovalWorkflows")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.OpeningYear", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("OpeningYears")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.State", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.SupervisorSetup", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("SupervisorSetups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("SupervisorSetups")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.WarningType", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("WarningTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.WorkflowMaping", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.BranchInfo", "Branch")
                        .WithMany("WorkflowMapings")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("WorkflowMapings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Department", "Department")
                        .WithMany("WorkflowMapings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("WorkflowMapings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.NewApprovalWorkflow", "Workflow")
                        .WithMany("WorkflowMapings")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Employees");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Asset", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("Assets")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Assets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssetType");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.AssetRequisition", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Asset", "Assets")
                        .WithMany("AssetRequisitions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("AssetRequisitions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("AssetRequisitions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Assets");

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.AssetType", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.BranchInfo", "Branch")
                        .WithMany("AssetTypes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("AssetTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("AssetTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.AwardInfo", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.AwardType", "AwardType")
                        .WithMany("AwardInfos")
                        .HasForeignKey("AwardTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("AwardInfos")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("AwardInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwardType");

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.BankInfo", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.BranchInfo", "BranchInfo")
                        .WithMany("BankInfos")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("BankInfos")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("BankInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BranchInfo");

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.BranchInfo", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.City", "City")
                        .WithMany("BranchInfos")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Country", "Country")
                        .WithMany("BranchInfos")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.State", "State")
                        .WithMany("BranchInfos")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("BranchInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.CompanyInfo", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.City", "City")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Country", "Country")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.State", "State")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Contact", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("Contacts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.City", "City")
                        .WithMany("Contacts")
                        .HasForeignKey("PermanentCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Country", "Country")
                        .WithMany("Contacts")
                        .HasForeignKey("PermanentCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.State", "State")
                        .WithMany("Contacts")
                        .HasForeignKey("PermanentStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Employees");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.DepartmentSetup", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.Department", "Department")
                        .WithMany("DepartmentSetups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("DepartmentSetups")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("DepartmentSetups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.DesignationSetup", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.Designation", "Designation")
                        .WithMany("DesignationSetups")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("DesignationSetups")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("DesignationSetups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Designation");

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.DistributeAsset", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Asset", "Assets")
                        .WithMany("DistributeAssets")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("DistributeAssets")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("DistributeAssets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Assets");

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Document", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("Documents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DocumentType");

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Education", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.EducationType", "EducationType")
                        .WithMany("Educations")
                        .HasForeignKey("EducationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.EducationGroup", "EducationGroup")
                        .WithMany("Educations")
                        .HasForeignKey("EgucationGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("Educations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Grade", "Grade")
                        .WithMany("Educations")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Institute", "Institute")
                        .WithMany("Educations")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EducationGroup");

                    b.Navigation("EducationType");

                    b.Navigation("Employees");

                    b.Navigation("Grade");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.EmployeeManagementCategory", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("EmployeeManagementCategories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("EmployeeManagementCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Employees", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Designation", "Designation")
                        .WithMany("Employees")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.FamilyInfo", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("FamilyInfos")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("FamilyInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.FunctionalDesignation", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("FunctionalDesignations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("FunctionalDesignations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.JobNewStatus", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("JobNewStatus")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("JobNewStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.JobStatus", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("JobStatus")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Sql.Entities.Configurations.Status", "Status")
                        .WithMany("JobStatus")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Language", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("Languages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Proficiency", "Proficiency")
                        .WithMany("Languages")
                        .HasForeignKey("ProficencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("Proficiency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.NewJobStatus", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.BranchInfo", "Branch")
                        .WithMany("NewJobStatuses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("NewJobStatuses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Project", "Project")
                        .WithMany("NewJobStatuses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Passport", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.Country", "Country")
                        .WithMany("Passports")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("Passports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Passports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Project", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.BranchInfo", "Branch")
                        .WithMany("Projects")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Enrols.CompanyInfo", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Supervisor", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("Supervisors")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.SupervisorSetup", "SupervisorSetup")
                        .WithMany("Supervisors")
                        .HasForeignKey("SuppervisorSetupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Supervisors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("SupervisorSetup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserAddressInformation", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Sql.Entities.Configurations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Sql.Entities.Configurations.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Sql.Entities.Enrols.UserInformation", "UserInformation")
                        .WithMany("UserAddressInformations")
                        .HasForeignKey("UserInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserBasicInformation", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.UserInformation", "UserInformation")
                        .WithMany("UserBasicInformations")
                        .HasForeignKey("UserInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserCertification", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.UserInformation", "UserInformation")
                        .WithMany("UserCertifications")
                        .HasForeignKey("UserInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserEducationalInformation", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.UserInformation", "UserInformation")
                        .WithMany("UserEducationalInformations")
                        .HasForeignKey("UserInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserHobbyInformation", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.UserInformation", "UserInformation")
                        .WithMany("UserHobbyInformations")
                        .HasForeignKey("UserInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserInformation", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.City", "City")
                        .WithMany("UserInformations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Country", "Country")
                        .WithMany("UserInformations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Gender", "Gender")
                        .WithMany("UserInformation")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.MaritalStatus", "MaritalStatus")
                        .WithMany("UserInformation")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Country", "Nationality")
                        .WithMany("UserInformationNationalities")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.Religion", "Religion")
                        .WithMany("UserInformation")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Configurations.State", "State")
                        .WithMany("UserInformations")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("UserInformations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");

                    b.Navigation("Nationality");

                    b.Navigation("Religion");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserProfessionalInformation", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.UserInformation", "UserInformation")
                        .WithMany("UserProfessionalInformations")
                        .HasForeignKey("UserInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserSkill", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Configurations.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Sql.Entities.Enrols.UserInformation", "UserInformation")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Warning", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Enrols.Employees", "Employees")
                        .WithMany("Warnings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany("Warnings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+UserClaim", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+UserLogin", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+UserRole", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+UserToken", b =>
                {
                    b.HasOne("WebApp.Sql.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Blogs.Blog", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.AwardType", b =>
                {
                    b.Navigation("AwardInfos");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.City", b =>
                {
                    b.Navigation("BranchInfos");

                    b.Navigation("CompanyInfos");

                    b.Navigation("Contacts");

                    b.Navigation("UserInformations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Country", b =>
                {
                    b.Navigation("BranchInfos");

                    b.Navigation("CompanyInfos");

                    b.Navigation("Contacts");

                    b.Navigation("Passports");

                    b.Navigation("States");

                    b.Navigation("UserInformationNationalities");

                    b.Navigation("UserInformations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Department", b =>
                {
                    b.Navigation("DepartmentSetups");

                    b.Navigation("Employees");

                    b.Navigation("WorkflowMapings");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Designation", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("DesignationSetups");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.EducationGroup", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.EducationType", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Gender", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Grade", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Institute", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.MaritalStatus", b =>
                {
                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.NewApprovalWorkflow", b =>
                {
                    b.Navigation("WorkflowMapings");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Proficiency", b =>
                {
                    b.Navigation("Languages");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Religion", b =>
                {
                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.State", b =>
                {
                    b.Navigation("BranchInfos");

                    b.Navigation("Citites");

                    b.Navigation("CompanyInfos");

                    b.Navigation("Contacts");

                    b.Navigation("UserInformations");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.Status", b =>
                {
                    b.Navigation("JobStatus");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Configurations.SupervisorSetup", b =>
                {
                    b.Navigation("Supervisors");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Asset", b =>
                {
                    b.Navigation("AssetRequisitions");

                    b.Navigation("DistributeAssets");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.BranchInfo", b =>
                {
                    b.Navigation("AssetTypes");

                    b.Navigation("BankInfos");

                    b.Navigation("JobBaseStatuses");

                    b.Navigation("NewJobStatuses");

                    b.Navigation("Projects");

                    b.Navigation("WorkflowMapings");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.CompanyInfo", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("AssetTypes");

                    b.Navigation("AwardTypes");

                    b.Navigation("ClaimTypes");

                    b.Navigation("DocumentCategories");

                    b.Navigation("EducationGroups");

                    b.Navigation("EducationTypes");

                    b.Navigation("EmploymentCategories");

                    b.Navigation("Grades");

                    b.Navigation("Institutes");

                    b.Navigation("JobBaseStatuses");

                    b.Navigation("LeaveTypes");

                    b.Navigation("NewApprovalWorkflows");

                    b.Navigation("NewJobStatuses");

                    b.Navigation("OpeningYears");

                    b.Navigation("Projects");

                    b.Navigation("SupervisorSetups");

                    b.Navigation("WarningTypes");

                    b.Navigation("WorkflowMapings");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Employees", b =>
                {
                    b.Navigation("AssetRequisitions");

                    b.Navigation("AwardInfos");

                    b.Navigation("BankInfos");

                    b.Navigation("Contacts");

                    b.Navigation("DepartmentSetups");

                    b.Navigation("DesignationSetups");

                    b.Navigation("DistributeAssets");

                    b.Navigation("Documents");

                    b.Navigation("Educations");

                    b.Navigation("EmployeeManagementCategories");

                    b.Navigation("FamilyInfos");

                    b.Navigation("FunctionalDesignations");

                    b.Navigation("JobNewStatus");

                    b.Navigation("JobStatus");

                    b.Navigation("Languages");

                    b.Navigation("Passports");

                    b.Navigation("Supervisors");

                    b.Navigation("SupervisorSetups");

                    b.Navigation("Warnings");

                    b.Navigation("WorkflowMapings");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.Project", b =>
                {
                    b.Navigation("JobBaseStatuses");

                    b.Navigation("NewJobStatuses");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Enrols.UserInformation", b =>
                {
                    b.Navigation("UserAddressInformations");

                    b.Navigation("UserBasicInformations");

                    b.Navigation("UserCertifications");

                    b.Navigation("UserEducationalInformations");

                    b.Navigation("UserHobbyInformations");

                    b.Navigation("UserProfessionalInformations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("WebApp.Sql.Entities.Identities.IdentityModel+User", b =>
                {
                    b.Navigation("AssetRequisitions");

                    b.Navigation("Assets");

                    b.Navigation("AssetTypes");

                    b.Navigation("AwardInfos");

                    b.Navigation("BankInfos");

                    b.Navigation("BranchInfos");

                    b.Navigation("CompanyInfos");

                    b.Navigation("Contacts");

                    b.Navigation("DepartmentSetups");

                    b.Navigation("DesignationSetups");

                    b.Navigation("DistributeAssets");

                    b.Navigation("Documents");

                    b.Navigation("DocumentTypes");

                    b.Navigation("EmployeeManagementCategories");

                    b.Navigation("Employees");

                    b.Navigation("FamilyInfos");

                    b.Navigation("FunctionalDesignations");

                    b.Navigation("JobNewStatus");

                    b.Navigation("Languages");

                    b.Navigation("Passports");

                    b.Navigation("Projects");

                    b.Navigation("Supervisors");

                    b.Navigation("UserInformations");

                    b.Navigation("Warnings");
                });
#pragma warning restore 612, 618
        }
    }
}
